create table "public"."wallets" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "balance" bigint not null,
    "owner_id" uuid not null
);


alter table "public"."wallets" enable row level security;

CREATE UNIQUE INDEX wallets_pkey ON public.wallets USING btree (id);

alter table "public"."wallets" add constraint "wallets_pkey" PRIMARY KEY using index "wallets_pkey";

alter table "public"."wallets" add constraint "wallets_balance_check" CHECK ((balance >= 0)) not valid;

alter table "public"."wallets" validate constraint "wallets_balance_check";

alter table "public"."wallets" add constraint "wallets_name_check" CHECK (((length(name) >= 1) AND (length(name) <= 32))) not valid;

alter table "public"."wallets" validate constraint "wallets_name_check";

alter table "public"."wallets" add constraint "wallets_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."wallets" validate constraint "wallets_owner_id_fkey";

grant delete on table "public"."wallets" to "anon";

grant insert on table "public"."wallets" to "anon";

grant references on table "public"."wallets" to "anon";

grant select on table "public"."wallets" to "anon";

grant trigger on table "public"."wallets" to "anon";

grant truncate on table "public"."wallets" to "anon";

grant update on table "public"."wallets" to "anon";

grant delete on table "public"."wallets" to "authenticated";

grant insert on table "public"."wallets" to "authenticated";

grant references on table "public"."wallets" to "authenticated";

grant select on table "public"."wallets" to "authenticated";

grant trigger on table "public"."wallets" to "authenticated";

grant truncate on table "public"."wallets" to "authenticated";

grant update on table "public"."wallets" to "authenticated";

grant delete on table "public"."wallets" to "service_role";

grant insert on table "public"."wallets" to "service_role";

grant references on table "public"."wallets" to "service_role";

grant select on table "public"."wallets" to "service_role";

grant trigger on table "public"."wallets" to "service_role";

grant truncate on table "public"."wallets" to "service_role";

grant update on table "public"."wallets" to "service_role";

create policy "Enable access for users based on owner_id"
on "public"."wallets"
as permissive
for all
to authenticated
using ((( SELECT auth.uid() AS uid) = owner_id))
with check ((( SELECT auth.uid() AS uid) = owner_id));




